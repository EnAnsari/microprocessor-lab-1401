;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <io.h>
;#include <math.h>
;
;void main(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0008     DDRA = DDRB = 0xFF;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0009     int i, a_index, b_index, flag = 0;
; 0000 000A     char b[8] = {
; 0000 000B         0b00000001,
; 0000 000C         0b00000010,
; 0000 000D         0b00000100,
; 0000 000E         0b00001000,
; 0000 000F         0b00010000,
; 0000 0010         0b00100000,
; 0000 0011         0b01000000,
; 0000 0012         0b10000000
; 0000 0013     };
; 0000 0014     while (1) {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	i -> R16,R17
;	a_index -> R18,R19
;	b_index -> R20,R21
;	flag -> Y+8
;	b -> Y+0
;PCODE: $00000016 VOL: 0
; 0000 0015         flag = !flag;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0016         for(i = 0; i < 8; i++) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0017             if(flag) {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0018                 a_index = i;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0019                 b_index = 7 - i;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001A             }
; 0000 001B             else {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001C                 a_index = 7 - i;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001D                 b_index = i;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001E             }
;PCODE: $00000033 VOL: 0
; 0000 001F             PORTA = b[a_index];
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0020             PORTB = b[b_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0021             delay_ms(200);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0022             PORTA = PORTB = 0b00000000;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0023         }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0024     }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0025 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
